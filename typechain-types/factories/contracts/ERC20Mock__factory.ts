/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { ERC20Mock, ERC20MockInterface } from "../../contracts/ERC20Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620021bd380380620021bd8339818101604052810190620000379190620003cb565b81818160039080519060200190620000519291906200017e565b5080600490805190602001906200006a9291906200017e565b5050506000600560006101000a81548160ff021916908315150217905550620000a86200009c620000b060201b60201c565b620000b860201b60201c565b5050620004b4565b600033905090565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200018c906200047f565b90600052602060002090601f016020900481019282620001b05760008555620001fc565b82601f10620001cb57805160ff1916838001178555620001fc565b82800160010185558215620001fc579182015b82811115620001fb578251825591602001919060010190620001de565b5b5090506200020b91906200020f565b5090565b5b808211156200022a57600081600090555060010162000210565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000297826200024c565b810181811067ffffffffffffffff82111715620002b957620002b86200025d565b5b80604052505050565b6000620002ce6200022e565b9050620002dc82826200028c565b919050565b600067ffffffffffffffff821115620002ff57620002fe6200025d565b5b6200030a826200024c565b9050602081019050919050565b60005b83811015620003375780820151818401526020810190506200031a565b8381111562000347576000848401525b50505050565b6000620003646200035e84620002e1565b620002c2565b90508281526020810184848401111562000383576200038262000247565b5b6200039084828562000317565b509392505050565b600082601f830112620003b057620003af62000242565b5b8151620003c28482602086016200034d565b91505092915050565b60008060408385031215620003e557620003e462000238565b5b600083015167ffffffffffffffff8111156200040657620004056200023d565b5b620004148582860162000398565b925050602083015167ffffffffffffffff8111156200043857620004376200023d565b5b620004468582860162000398565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200049857607f821691505b602082108103620004ae57620004ad62000450565b5b50919050565b611cf980620004c46000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063715018a6116100a25780639dc29fac116100715780639dc29fac146102d1578063a457c2d7146102ed578063a9059cbb1461031d578063dd62ed3e1461034d578063f2fde38b1461037d57610116565b8063715018a61461026f57806379cc6790146102795780638da5cb5b1461029557806395d89b41146102b357610116565b8063313ce567116100e9578063313ce567146101b757806339509351146101d557806340c10f19146102055780635c975abb1461022157806370a082311461023f57610116565b806306fdde031461011b578063095ea7b31461013957806318160ddd1461016957806323b872dd14610187575b600080fd5b610123610399565b6040516101309190611236565b60405180910390f35b610153600480360381019061014e91906112f1565b61042b565b604051610160919061134c565b60405180910390f35b61017161044e565b60405161017e9190611376565b60405180910390f35b6101a1600480360381019061019c9190611391565b610458565b6040516101ae919061134c565b60405180910390f35b6101bf610487565b6040516101cc9190611400565b60405180910390f35b6101ef60048036038101906101ea91906112f1565b610490565b6040516101fc919061134c565b60405180910390f35b61021f600480360381019061021a91906112f1565b6104c7565b005b6102296104d5565b604051610236919061134c565b60405180910390f35b6102596004803603810190610254919061141b565b6104ec565b6040516102669190611376565b60405180910390f35b610277610534565b005b610293600480360381019061028e91906112f1565b610548565b005b61029d610568565b6040516102aa9190611457565b60405180910390f35b6102bb610592565b6040516102c89190611236565b60405180910390f35b6102eb60048036038101906102e691906112f1565b610624565b005b610307600480360381019061030291906112f1565b610632565b604051610314919061134c565b60405180910390f35b610337600480360381019061033291906112f1565b6106a9565b604051610344919061134c565b60405180910390f35b61036760048036038101906103629190611472565b6106cc565b6040516103749190611376565b60405180910390f35b6103976004803603810190610392919061141b565b610753565b005b6060600380546103a8906114e1565b80601f01602080910402602001604051908101604052809291908181526020018280546103d4906114e1565b80156104215780601f106103f657610100808354040283529160200191610421565b820191906000526020600020905b81548152906001019060200180831161040457829003601f168201915b5050505050905090565b6000806104366107d6565b90506104438185856107de565b600191505092915050565b6000600254905090565b6000806104636107d6565b90506104708582856109a7565b61047b858585610a33565b60019150509392505050565b60006012905090565b60008061049b6107d6565b90506104bc8185856104ad85896106cc565b6104b79190611541565b6107de565b600191505092915050565b6104d18282610cb2565b5050565b6000600560009054906101000a900460ff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61053c610e11565b6105466000610e8f565b565b61055a826105546107d6565b836109a7565b6105648282610f55565b5050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546105a1906114e1565b80601f01602080910402602001604051908101604052809291908181526020018280546105cd906114e1565b801561061a5780601f106105ef5761010080835404028352916020019161061a565b820191906000526020600020905b8154815290600101906020018083116105fd57829003601f168201915b5050505050905090565b61062e8282610f55565b5050565b60008061063d6107d6565b9050600061064b82866106cc565b905083811015610690576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068790611609565b60405180910390fd5b61069d82868684036107de565b60019250505092915050565b6000806106b46107d6565b90506106c1818585610a33565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61075b610e11565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c19061169b565b60405180910390fd5b6107d381610e8f565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361084d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108449061172d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b3906117bf565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161099a9190611376565b60405180910390a3505050565b60006109b384846106cc565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a2d5781811015610a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a169061182b565b60405180910390fd5b610a2c84848484036107de565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610aa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a99906118bd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b089061194f565b60405180910390fd5b610b1c83838361112b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610ba2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b99906119e1565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c359190611541565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c999190611376565b60405180910390a3610cac84848461113b565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1890611a4d565b60405180910390fd5b610d2d6000838361112b565b8060026000828254610d3f9190611541565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d949190611541565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610df99190611376565b60405180910390a3610e0d6000838361113b565b5050565b610e196107d6565b73ffffffffffffffffffffffffffffffffffffffff16610e37610568565b73ffffffffffffffffffffffffffffffffffffffff1614610e8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8490611ab9565b60405180910390fd5b565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610fc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbb90611b4b565b60405180910390fd5b610fd08260008361112b565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611056576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104d90611bdd565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282546110ad9190611bfd565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516111129190611376565b60405180910390a36111268360008461113b565b505050565b611136838383611140565b505050565b505050565b61114b838383611198565b6111536104d5565b15611193576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118a90611ca3565b60405180910390fd5b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111d75780820151818401526020810190506111bc565b838111156111e6576000848401525b50505050565b6000601f19601f8301169050919050565b60006112088261119d565b61121281856111a8565b93506112228185602086016111b9565b61122b816111ec565b840191505092915050565b6000602082019050818103600083015261125081846111fd565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112888261125d565b9050919050565b6112988161127d565b81146112a357600080fd5b50565b6000813590506112b58161128f565b92915050565b6000819050919050565b6112ce816112bb565b81146112d957600080fd5b50565b6000813590506112eb816112c5565b92915050565b6000806040838503121561130857611307611258565b5b6000611316858286016112a6565b9250506020611327858286016112dc565b9150509250929050565b60008115159050919050565b61134681611331565b82525050565b6000602082019050611361600083018461133d565b92915050565b611370816112bb565b82525050565b600060208201905061138b6000830184611367565b92915050565b6000806000606084860312156113aa576113a9611258565b5b60006113b8868287016112a6565b93505060206113c9868287016112a6565b92505060406113da868287016112dc565b9150509250925092565b600060ff82169050919050565b6113fa816113e4565b82525050565b600060208201905061141560008301846113f1565b92915050565b60006020828403121561143157611430611258565b5b600061143f848285016112a6565b91505092915050565b6114518161127d565b82525050565b600060208201905061146c6000830184611448565b92915050565b6000806040838503121561148957611488611258565b5b6000611497858286016112a6565b92505060206114a8858286016112a6565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806114f957607f821691505b60208210810361150c5761150b6114b2565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061154c826112bb565b9150611557836112bb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561158c5761158b611512565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006115f36025836111a8565b91506115fe82611597565b604082019050919050565b60006020820190508181036000830152611622816115e6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006116856026836111a8565b915061169082611629565b604082019050919050565b600060208201905081810360008301526116b481611678565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006117176024836111a8565b9150611722826116bb565b604082019050919050565b600060208201905081810360008301526117468161170a565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006117a96022836111a8565b91506117b48261174d565b604082019050919050565b600060208201905081810360008301526117d88161179c565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611815601d836111a8565b9150611820826117df565b602082019050919050565b6000602082019050818103600083015261184481611808565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006118a76025836111a8565b91506118b28261184b565b604082019050919050565b600060208201905081810360008301526118d68161189a565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006119396023836111a8565b9150611944826118dd565b604082019050919050565b600060208201905081810360008301526119688161192c565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006119cb6026836111a8565b91506119d68261196f565b604082019050919050565b600060208201905081810360008301526119fa816119be565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611a37601f836111a8565b9150611a4282611a01565b602082019050919050565b60006020820190508181036000830152611a6681611a2a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611aa36020836111a8565b9150611aae82611a6d565b602082019050919050565b60006020820190508181036000830152611ad281611a96565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611b356021836111a8565b9150611b4082611ad9565b604082019050919050565b60006020820190508181036000830152611b6481611b28565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611bc76022836111a8565b9150611bd282611b6b565b604082019050919050565b60006020820190508181036000830152611bf681611bba565b9050919050565b6000611c08826112bb565b9150611c13836112bb565b925082821015611c2657611c25611512565b5b828203905092915050565b7f45524332305061757361626c653a20746f6b656e207472616e7366657220776860008201527f696c652070617573656400000000000000000000000000000000000000000000602082015250565b6000611c8d602a836111a8565b9150611c9882611c31565b604082019050919050565b60006020820190508181036000830152611cbc81611c80565b905091905056fea2646970667358221220776ba1e8c0146b74dbbc2ed16a3ba35a031e904baaff36211c4fad52a00b7d6b64736f6c634300080d0033";

type ERC20MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Mock__factory extends ContractFactory {
  constructor(...args: ERC20MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20Mock> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<ERC20Mock>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override attach(address: string): ERC20Mock {
    return super.attach(address) as ERC20Mock;
  }
  override connect(signer: Signer): ERC20Mock__factory {
    return super.connect(signer) as ERC20Mock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20MockInterface {
    return new utils.Interface(_abi) as ERC20MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC20Mock;
  }
}
