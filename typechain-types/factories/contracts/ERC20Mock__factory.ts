/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { ERC20Mock, ERC20MockInterface } from "../../contracts/ERC20Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620021b5380380620021b58339818101604052810190620000379190620003cb565b81818160039080519060200190620000519291906200017e565b5080600490805190602001906200006a9291906200017e565b5050506000600560006101000a81548160ff021916908315150217905550620000a86200009c620000b060201b60201c565b620000b860201b60201c565b5050620004b4565b600033905090565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200018c906200047f565b90600052602060002090601f016020900481019282620001b05760008555620001fc565b82601f10620001cb57805160ff1916838001178555620001fc565b82800160010185558215620001fc579182015b82811115620001fb578251825591602001919060010190620001de565b5b5090506200020b91906200020f565b5090565b5b808211156200022a57600081600090555060010162000210565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000297826200024c565b810181811067ffffffffffffffff82111715620002b957620002b86200025d565b5b80604052505050565b6000620002ce6200022e565b9050620002dc82826200028c565b919050565b600067ffffffffffffffff821115620002ff57620002fe6200025d565b5b6200030a826200024c565b9050602081019050919050565b60005b83811015620003375780820151818401526020810190506200031a565b8381111562000347576000848401525b50505050565b6000620003646200035e84620002e1565b620002c2565b90508281526020810184848401111562000383576200038262000247565b5b6200039084828562000317565b509392505050565b600082601f830112620003b057620003af62000242565b5b8151620003c28482602086016200034d565b91505092915050565b60008060408385031215620003e557620003e462000238565b5b600083015167ffffffffffffffff8111156200040657620004056200023d565b5b620004148582860162000398565b925050602083015167ffffffffffffffff8111156200043857620004376200023d565b5b620004468582860162000398565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200049857607f821691505b602082108103620004ae57620004ad62000450565b5b50919050565b611cf180620004c46000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063715018a6116100a25780639dc29fac116100715780639dc29fac146102d1578063a457c2d7146102ed578063a9059cbb1461031d578063dd62ed3e1461034d578063f2fde38b1461037d57610116565b8063715018a61461026f57806379cc6790146102795780638da5cb5b1461029557806395d89b41146102b357610116565b8063313ce567116100e9578063313ce567146101b757806339509351146101d557806340c10f19146102055780635c975abb1461022157806370a082311461023f57610116565b806306fdde031461011b578063095ea7b31461013957806318160ddd1461016957806323b872dd14610187575b600080fd5b610123610399565b604051610130919061122e565b60405180910390f35b610153600480360381019061014e91906112e9565b61042b565b6040516101609190611344565b60405180910390f35b61017161044e565b60405161017e919061136e565b60405180910390f35b6101a1600480360381019061019c9190611389565b610458565b6040516101ae9190611344565b60405180910390f35b6101bf610487565b6040516101cc91906113f8565b60405180910390f35b6101ef60048036038101906101ea91906112e9565b610490565b6040516101fc9190611344565b60405180910390f35b61021f600480360381019061021a91906112e9565b6104c7565b005b6102296104dd565b6040516102369190611344565b60405180910390f35b61025960048036038101906102549190611413565b6104f4565b604051610266919061136e565b60405180910390f35b61027761053c565b005b610293600480360381019061028e91906112e9565b610550565b005b61029d610570565b6040516102aa919061144f565b60405180910390f35b6102bb61059a565b6040516102c8919061122e565b60405180910390f35b6102eb60048036038101906102e691906112e9565b61062c565b005b610307600480360381019061030291906112e9565b61063a565b6040516103149190611344565b60405180910390f35b610337600480360381019061033291906112e9565b6106b1565b6040516103449190611344565b60405180910390f35b6103676004803603810190610362919061146a565b6106d4565b604051610374919061136e565b60405180910390f35b61039760048036038101906103929190611413565b61075b565b005b6060600380546103a8906114d9565b80601f01602080910402602001604051908101604052809291908181526020018280546103d4906114d9565b80156104215780601f106103f657610100808354040283529160200191610421565b820191906000526020600020905b81548152906001019060200180831161040457829003601f168201915b5050505050905090565b6000806104366107de565b90506104438185856107e6565b600191505092915050565b6000600254905090565b6000806104636107de565b90506104708582856109af565b61047b858585610a3b565b60019150509392505050565b60006012905090565b60008061049b6107de565b90506104bc8185856104ad85896106d4565b6104b79190611539565b6107e6565b600191505092915050565b6104cf610cba565b6104d98282610d38565b5050565b6000600560009054906101000a900460ff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610544610cba565b61054e6000610e97565b565b6105628261055c6107de565b836109af565b61056c8282610f5d565b5050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546105a9906114d9565b80601f01602080910402602001604051908101604052809291908181526020018280546105d5906114d9565b80156106225780601f106105f757610100808354040283529160200191610622565b820191906000526020600020905b81548152906001019060200180831161060557829003601f168201915b5050505050905090565b6106368282610f5d565b5050565b6000806106456107de565b9050600061065382866106d4565b905083811015610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068f90611601565b60405180910390fd5b6106a582868684036107e6565b60019250505092915050565b6000806106bc6107de565b90506106c9818585610a3b565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610763610cba565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c990611693565b60405180910390fd5b6107db81610e97565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084c90611725565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bb906117b7565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516109a2919061136e565b60405180910390a3505050565b60006109bb84846106d4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a355781811015610a27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1e90611823565b60405180910390fd5b610a3484848484036107e6565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610aaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa1906118b5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1090611947565b60405180910390fd5b610b24838383611133565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba1906119d9565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c3d9190611539565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610ca1919061136e565b60405180910390a3610cb484848461118b565b50505050565b610cc26107de565b73ffffffffffffffffffffffffffffffffffffffff16610ce0610570565b73ffffffffffffffffffffffffffffffffffffffff1614610d36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2d90611a45565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610da7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9e90611ab1565b60405180910390fd5b610db360008383611133565b8060026000828254610dc59190611539565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e1a9190611539565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e7f919061136e565b60405180910390a3610e936000838361118b565b5050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610fcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc390611b43565b60405180910390fd5b610fd882600083611133565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561105e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105590611bd5565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282546110b59190611bf5565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161111a919061136e565b60405180910390a361112e8360008461118b565b505050565b61113e838383611190565b6111466104dd565b15611186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117d90611c9b565b60405180910390fd5b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111cf5780820151818401526020810190506111b4565b838111156111de576000848401525b50505050565b6000601f19601f8301169050919050565b600061120082611195565b61120a81856111a0565b935061121a8185602086016111b1565b611223816111e4565b840191505092915050565b6000602082019050818103600083015261124881846111f5565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061128082611255565b9050919050565b61129081611275565b811461129b57600080fd5b50565b6000813590506112ad81611287565b92915050565b6000819050919050565b6112c6816112b3565b81146112d157600080fd5b50565b6000813590506112e3816112bd565b92915050565b60008060408385031215611300576112ff611250565b5b600061130e8582860161129e565b925050602061131f858286016112d4565b9150509250929050565b60008115159050919050565b61133e81611329565b82525050565b60006020820190506113596000830184611335565b92915050565b611368816112b3565b82525050565b6000602082019050611383600083018461135f565b92915050565b6000806000606084860312156113a2576113a1611250565b5b60006113b08682870161129e565b93505060206113c18682870161129e565b92505060406113d2868287016112d4565b9150509250925092565b600060ff82169050919050565b6113f2816113dc565b82525050565b600060208201905061140d60008301846113e9565b92915050565b60006020828403121561142957611428611250565b5b60006114378482850161129e565b91505092915050565b61144981611275565b82525050565b60006020820190506114646000830184611440565b92915050565b6000806040838503121561148157611480611250565b5b600061148f8582860161129e565b92505060206114a08582860161129e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806114f157607f821691505b602082108103611504576115036114aa565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611544826112b3565b915061154f836112b3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156115845761158361150a565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006115eb6025836111a0565b91506115f68261158f565b604082019050919050565b6000602082019050818103600083015261161a816115de565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061167d6026836111a0565b915061168882611621565b604082019050919050565b600060208201905081810360008301526116ac81611670565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061170f6024836111a0565b915061171a826116b3565b604082019050919050565b6000602082019050818103600083015261173e81611702565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006117a16022836111a0565b91506117ac82611745565b604082019050919050565b600060208201905081810360008301526117d081611794565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061180d601d836111a0565b9150611818826117d7565b602082019050919050565b6000602082019050818103600083015261183c81611800565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061189f6025836111a0565b91506118aa82611843565b604082019050919050565b600060208201905081810360008301526118ce81611892565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006119316023836111a0565b915061193c826118d5565b604082019050919050565b6000602082019050818103600083015261196081611924565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006119c36026836111a0565b91506119ce82611967565b604082019050919050565b600060208201905081810360008301526119f2816119b6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611a2f6020836111a0565b9150611a3a826119f9565b602082019050919050565b60006020820190508181036000830152611a5e81611a22565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611a9b601f836111a0565b9150611aa682611a65565b602082019050919050565b60006020820190508181036000830152611aca81611a8e565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611b2d6021836111a0565b9150611b3882611ad1565b604082019050919050565b60006020820190508181036000830152611b5c81611b20565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611bbf6022836111a0565b9150611bca82611b63565b604082019050919050565b60006020820190508181036000830152611bee81611bb2565b9050919050565b6000611c00826112b3565b9150611c0b836112b3565b925082821015611c1e57611c1d61150a565b5b828203905092915050565b7f45524332305061757361626c653a20746f6b656e207472616e7366657220776860008201527f696c652070617573656400000000000000000000000000000000000000000000602082015250565b6000611c85602a836111a0565b9150611c9082611c29565b604082019050919050565b60006020820190508181036000830152611cb481611c78565b905091905056fea2646970667358221220ede9249ed4ea10287cedfa9d1b0d130632717f6b8d320fc148d705c09e45092b64736f6c634300080d0033";

type ERC20MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Mock__factory extends ContractFactory {
  constructor(...args: ERC20MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20Mock> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<ERC20Mock>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override attach(address: string): ERC20Mock {
    return super.attach(address) as ERC20Mock;
  }
  override connect(signer: Signer): ERC20Mock__factory {
    return super.connect(signer) as ERC20Mock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20MockInterface {
    return new utils.Interface(_abi) as ERC20MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC20Mock;
  }
}
